#!/usr/bin/env groovy
library "security-ci-commons-shared-lib"
def NODE = nodeDetails("uaa-upgrade")

pipeline {
    agent none
    environment {
        COMPLIANCEENABLED = true
    }
    options {
        timestamps()
        skipDefaultCheckout()
        buildDiscarder(logRotator(artifactNumToKeepStr: '30', numToKeepStr: '30'))
    }
    parameters  {
        choice(
            name: 'DEPLOYMENT_ENVIRONMENT',
            description: 'This specifies which EKS environment to test',
            choices: 'dev\nint\nqa\nstage'
        )
        string(
            name: 'UAA_K8S_DEPLOY_BRANCH',
            defaultValue: 'master',
            description: 'uaa-k8s-deploy repo branch to use for testing'
        )
        booleanParam(
            name: 'RUN_ORCHESTRATOR_INTEGRATION_TESTS',
            defaultValue: false,
            description: 'Whether or not to run orchestrator integration tests'
        )
    }
    stages {
        stage('Run acceptance tests in eks') {
            agent{
                docker {
                    image "${NODE['IMAGE']}"
                    label "${NODE['LABEL']}"
                    args "${NODE['ARGS']}"
                }
            }
            environment {
                ADMIN_CLIENT_SECRET = credentials("ADMIN_CLIENT_SECRET_EKS_${DEPLOYMENT_ENVIRONMENT.toUpperCase()}")
                FUNCTIONAL_USER = credentials("FUNCTIONAL_USER")
            }
            steps {
                script {
                    currentBuild.displayName = "#${env.BUILD_NUMBER} (env: ${params.DEPLOYMENT_ENVIRONMENT})"
                }

                dir('uaa') {
                    checkout scm
                }

                dir('uaa/iam-k8s-utils') {
                    git changelog: false, credentialsId: 'github.build.ge.com', poll: false,
                        url: 'https://github.build.ge.com/predix/iam-k8s-utils.git'
                }

                dir('uaa-k8s-deploy') {
                    git changelog: false, credentialsId: 'github.devtools.predix.io', poll: false,
                        url: 'https://github.devtools.predix.io/predix-security/uaa-k8s-deploy.git',
                        branch: params.UAA_K8S_DEPLOY_BRANCH
                }

                sh '''#!/bin/bash -ex
                    echo 'Installing yq'
                    wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
                    chmod a+x /usr/local/bin/yq
                    yq --version

                    export ARTIFACTORY_READER=$FUNCTIONAL_USER_USR
                    export ARTIFACTORY_READER_PW=$FUNCTIONAL_USER_PSW
                    export SAML_IDP_USER=$FUNCTIONAL_USER_USR
                    export SAML_IDP_USER_PW=$FUNCTIONAL_USER_PSW

                    pushd uaa-k8s-deploy
                        ./scripts/uaa-acceptance-tests.sh $DEPLOYMENT_ENVIRONMENT
                    popd
                '''
            }
            post{
                always {
                    publishHTML target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'uaa/uaa/build/reports/tests/acceptanceTest',
                        reportFiles: 'index.html',
                        reportName: 'Acceptance Test Results'
                    ]
                }
            }
        }
        stage('Run Orchestrator Integration tests in eks') {
            agent{
                docker {
                    image "${NODE['IMAGE']}"
                    label "${NODE['LABEL']}"
                    args "${NODE['ARGS']}"
                }
            }
            when {
                expression {
                    return params.RUN_ORCHESTRATOR_INTEGRATION_TESTS
                }
            }
            environment {
                FUNCTIONAL_USER = credentials("AWS_ECR_SSO_CREDENTIALS")
            }
            steps {
                script {
                    currentBuild.displayName = "#${env.BUILD_NUMBER} (env: ${params.DEPLOYMENT_ENVIRONMENT})"
                }

                dir('uaa') {
                    checkout scm
                }

                dir('uaa/iam-k8s-utils') {
                    git changelog: false, credentialsId: 'github.build.ge.com', poll: false,
                        url: 'https://github.build.ge.com/predix/iam-k8s-utils.git'
                }

                dir('uaa-k8s-deploy') {
                    git changelog: false, credentialsId: 'github.devtools.predix.io', poll: false,
                            url: 'https://github.devtools.predix.io/predix-security/uaa-k8s-deploy.git',
                            branch: params.UAA_K8S_DEPLOY_BRANCH
                }

                sh'''
                    # Install gossamer
                    CURRENT_VERSION=3.1.7
                    wget -q https://github.com/GESkunkworks/gossamer3/releases/download/v${CURRENT_VERSION}/gossamer3_${CURRENT_VERSION}_linux_amd64.tar.gz
                    tar -xzvf gossamer3_${CURRENT_VERSION}_linux_amd64.tar.gz -C /usr/local/bin
                    chmod u+x /usr/local/bin/gossamer3
                '''

                sh '''#!/bin/bash -ex
                    echo 10.229.23.137 signin.aws.amazon.com >> /etc/hosts
                    echo 10.229.23.151 signin.aws.amazon.com >> /etc/hosts
                    export ARTIFACTORY_READER=$FUNCTIONAL_USER_USR
                    export ARTIFACTORY_READER_PW=$FUNCTIONAL_USER_PSW
                    pushd uaa-k8s-deploy
                        chmod +x ./test/e2e-claim-test/set-env-${DEPLOYMENT_ENVIRONMENT}.sh
                       . test/e2e-claim-test/set-env-${DEPLOYMENT_ENVIRONMENT}.sh
                    popd
                    pushd uaa
                        ./gradlew --no-daemon --continue jacocoRootReportOrchestratorIntegrationTest
                    popd
                '''
            }
            post{
                always {
                    publishHTML target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'uaa/uaa/build/reports/tests/orchestratorIntegrationTest',
                        reportFiles: 'index.html',
                        reportName: 'Orchestrator Integration Test Results'
                    ]
                }
            }
        }
    }
}
