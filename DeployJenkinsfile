#!/usr/bin/env groovy
def buildGeArtServer = Artifactory.server('build.ge')

library "security-ci-commons-shared-lib"
def NODE = nodeDetails("uaa-upgrade")

pipeline {
    agent none
    environment {
        COMPLIANCEENABLED = true
    }
    options {
        skipDefaultCheckout()
        buildDiscarder(logRotator(artifactDaysToKeepStr: '1', artifactNumToKeepStr: '1', daysToKeepStr: '5', numToKeepStr: '10'))
    }
    parameters  {
        choice(name: 'DEPLOYMENT_TYPE', choices:'cf3-release-candidate\ncf3-staging\ncf3-sysint\ncf3-integration\nvpc\njpn\neu-central\nazr-usw\nasv-pr\ngovw\nperf-vpc-sb\nperf-asv-sb\nperf-cf3\nperf-govcloud\nvpc-db-mig-test\nasv-sb', description: 'This specifies which point of presence to deploy to')
        booleanParam(name: 'MAP_ROUTES_TO_DEPLOYED_APP', defaultValue: true, description: 'Determines if the published routes are mapped to the newly deployed app. Defaults to true.')
        // booleanParam(name: 'RUN_FULL_ACCEPTANCE_TESTS', defaultValue: true, description: 'Determines whether to run the full acceptance test suite against the freshly deployed UAA. If left unchecked, it will run at least the basic acceptance tests.')
    }
    stages{
        stage('Deploy') {
            agent{
                docker {
                    image "${NODE['IMAGE']}"
                    label "${NODE['LABEL']}"
                    args "${NODE['ARGS']}"
                }
            }
            environment {
                CF_CREDENTIALS = credentials("CF_CREDENTIALS_${DEPLOYMENT_TYPE.toUpperCase().replaceAll('-','_')}")
                ADMIN_CLIENT_SECRET = credentials("ADMIN_CLIENT_SECRET_${DEPLOYMENT_TYPE.toUpperCase().replaceAll('-','_')}")
            }
            steps {
                dir('uaa') {
                    checkout scm
                }
                script {
                    APP_VERSION = sh (returnStdout: true, script: '''
                        grep 'version' uaa/gradle.properties | sed 's/version=//'
                        ''').trim()
                    echo "Downloading UAA  ${APP_VERSION} Artifact Artifactory"
                    def downloadSpec = """{
                        "files": [
                            {
                                "target": "deploy-workspace/",
                                "flat": "true",
                                "pattern": "MAAXA/builds/uaa/${APP_VERSION}/*.war"
                            }
                        ]
                    }"""
                    sh 'pwd && ls -ltr'
                    buildGeArtServer.download(downloadSpec)
                    sh "ls -ltr deploy-workspace/"
                }
                dir('uaa-cf-release') {
                    git changelog: false, credentialsId: 'github.build.ge.com', poll: false, url: 'https://github.build.ge.com/predix/uaa-cf-release.git', branch: 'master'
                }
                sh '''#!/bin/bash -ex

                source uaa/scripts/setup-tests.sh

                export CF_USERNAME=$CF_CREDENTIALS_USR
                export CF_PASSWORD=$CF_CREDENTIALS_PSW
                export APP_VERSION=`grep 'version' uaa/gradle.properties | sed 's/version=//'`
                echo "APP_VERSION is:$APP_VERSION"
                export DEPLOY_BRANCH_SUFFIX=$APP_VERSION
                source uaa-cf-release/config-${DEPLOYMENT_TYPE}/set-env.sh
                unset_env

                install_chromedriver

                pushd uaa-cf-release
                    source combine-inline-config.sh
                    echo "$UAA_CONFIG_YAML"
                    echo "$APP_NAME"
                    export UAA_CONFIG_COMMIT=`git rev-parse HEAD`
                    cf -v
                    ruby -v
                    ./ci_deploy.sh

                popd
                touch uaa-release.properties
                echo "DEPLOYMENT_TYPE:$DEPLOYMENT_TYPE" >> uaa-release.properties
                echo "UAA_CF_RELEASE_COMMIT_HASH:$UAA_CONFIG_COMMIT" >> uaa-release.properties
                echo "UAA_APP_VERSION:$APP_VERSION" >> uaa-release.properties
                '''
                stash includes: 'uaa-release.properties', name:'uaa-release.properties'
            }
        }
        stage('Upload UAA Artifact upon successful deploy of staging artifact') {
            agent {
                label 'dind'
            }
            when {
                expression { params.DEPLOYMENT_TYPE == 'cf3-staging' }
            }
            steps{
                script {
                    echo "Publishing UAA ${APP_VERSION} Artifact to Artifactory" 
                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "deploy-workspace/cloudfoundry-identity-uaa-${APP_VERSION}.war",
                                "target": "MAAXA/org/cloudfoundry/identity/cloudfoundry-identity-uaa/${APP_VERSION}/"
                            }
                        ]
                    }"""
                    def buildInfo = buildGeArtServer.upload(uploadSpec)
                    buildGeArtServer.publishBuildInfo(buildInfo)
                }
            }
        }
    }
}
