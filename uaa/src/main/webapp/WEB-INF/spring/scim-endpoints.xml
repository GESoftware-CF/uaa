<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
          xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
          xmlns:aop="http://www.springframework.org/schema/aop"
          xmlns:util="http://www.springframework.org/schema/util"
          xsi:schemaLocation="http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/security/oauth2 https://www.springframework.org/schema/security/spring-security-oauth2.xsd
        http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">

    <http name="groupEndpointSecurity" pattern="/Groups/**" create-session="stateless"
                    entry-point-ref="oauthAuthenticationEntryPoint"
                    use-expressions="true" authentication-manager-ref="emptyAuthenticationManager"
                    xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/Groups/zones" access="#oauth2.hasScopeInAuthZone('scim.zones')"/>
        <intercept-url pattern="/Groups/zones/**" access="#oauth2.hasScopeInAuthZone('scim.zones')"/>
        <intercept-url pattern="/Groups/External"
                              access="#oauth2.hasScope('scim.read') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                              method="GET"/>
        <intercept-url pattern="/Groups/External"
                              access="#oauth2.hasScope('scim.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                              method="POST"/>
        <intercept-url pattern="/Groups/External/**"
                              access="#oauth2.hasScope('scim.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                              method="DELETE"/>
        <intercept-url pattern="/Groups/**"
                              access="#oauth2.hasScope('scim.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                              method="DELETE"/>
        <intercept-url pattern="/Groups/**"
                              access="#oauth2.hasAnyScope('scim.write', 'groups.update') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                              method="PUT"/>
        <intercept-url pattern="/Groups/**"
                              access="#oauth2.hasAnyScope('scim.write', 'groups.update') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                              method="POST"/>
        <intercept-url pattern="/Groups/**"
                              access="#oauth2.hasScope('scim.read') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                              method="GET"/>
        <intercept-url pattern="/Groups/**"
                              access="#oauth2.hasAnyScope('scim.write', 'groups.update') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                              method="PATCH"/>
        <intercept-url pattern="/Groups"
                              access="#oauth2.hasScope('scim.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                              method="POST"/>
        <intercept-url pattern="/**" access="denyAll"/>
        <!--<intercept-url pattern="/**" access="ROLE_NONEXISTENT" />-->
        <custom-filter ref="resourceAgnosticAuthenticationFilter" position="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
        <expression-handler ref="oauthWebExpressionHandler"/>
        <csrf disabled="true"/>
    </http>

    <http name="scimUserPassword" pattern="/User*/*/password" create-session="stateless"
                    authentication-manager-ref="emptyAuthenticationManager"
                    entry-point-ref="oauthAuthenticationEntryPoint" access-decision-manager-ref="accessDecisionManager"
                    use-expressions="false"
                    xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY,scope=password.write"/>
        <custom-filter ref="passwordResourceAuthenticationFilter" position="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
        <csrf disabled="true"/>
    </http>

    <http name="scimUsers" pattern="/Users/**" create-session="stateless"
                    authentication-manager-ref="emptyAuthenticationManager"
                    entry-point-ref="oauthAuthenticationEntryPoint"
                    xmlns="http://www.springframework.org/schema/security" use-expressions="true">
        <intercept-url pattern="/Users/*/verify-link"
                              access="#oauth2.hasAnyScope('scim.create') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                              method="GET"/>
        <intercept-url pattern="/Users/*/verify"
                              access="#oauth2.hasAnyScope('scim.write','scim.create') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                              method="GET"/>
        <intercept-url pattern="/Users/*/status"
                              access="#oauth2.hasAnyScope('scim.write','uaa.account_status.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                              method="PATCH"/>
        <intercept-url pattern="/Users/**"
                              access="#oauth2.hasAnyScope('scim.read') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin') or @self.isUserSelf(request,1)"
                              method="GET"/>
        <!-- add self logic -->
        <intercept-url pattern="/Users/*"
                              access="#oauth2.hasAnyScope('scim.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                              method="DELETE"/>
        <intercept-url pattern="/Users/*"
                              access="#oauth2.hasAnyScope('scim.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin') or (@self.isUserSelf(request,1))"
                              method="PUT"/>
        <!-- add self logic -->
        <intercept-url pattern="/Users/*"
                              access="#oauth2.hasAnyScope('scim.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin') or (@self.isUserSelf(request,1))"
                              method="PATCH"/>
        <intercept-url pattern="/Users"
                              access="#oauth2.hasAnyScope('scim.write','scim.create') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                              method="POST"/>
        <intercept-url pattern="/**" access="denyAll"/>
        <expression-handler ref="oauthWebExpressionHandler"/>
        <custom-filter ref="resourceAgnosticAuthenticationFilter" position="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
        <csrf disabled="true"/>
    </http>

    <http name="scimUserIds" pattern="/ids/Users*" create-session="stateless"
                    authentication-manager-ref="emptyAuthenticationManager"
                    entry-point-ref="oauthAuthenticationEntryPoint" access-decision-manager-ref="accessDecisionManager"
                    use-expressions="false"
                    xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="scope=scim.userids"/>
        <custom-filter ref="idsResourceAuthenticationFilter" position="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
        <csrf disabled="true"/>
    </http>

    <oauth:resource-server id="passwordResourceAuthenticationFilter" token-services-ref="tokenServices"
                    resource-id="password" entry-point-ref="oauthAuthenticationEntryPoint"/>

    <oauth:resource-server id="scimResourceAuthenticationFilter" token-services-ref="tokenServices"
                    resource-id="scim" entry-point-ref="oauthAuthenticationEntryPoint"/>

    <oauth:resource-server id="resourceAgnosticAuthenticationFilter" token-services-ref="tokenServices"
                    entry-point-ref="oauthAuthenticationEntryPoint"/>

    <oauth:resource-server id="idsResourceAuthenticationFilter" token-services-ref="tokenServices"
                    entry-point-ref="oauthAuthenticationEntryPoint"/>


</beans>
