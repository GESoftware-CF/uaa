Project identityServer = parent.subprojects.find { it.name.equals('cloudfoundry-identity-server') }

apply plugin: 'war'
apply plugin: 'org.asciidoctor.convert'

processResources {
  //maven replaces project.artifactId in the log4j.properties file
  //https://www.pivotaltracker.com/story/show/74344574
  from(new File('../common/src/main/resources/log4j.properties'))
  filter { line -> line.contains('${project.artifactId}') ? line.replace('${project.artifactId}','cloudfoundry-identity-uaa') : line }
}

apply plugin: 'eclipse-wtp'
eclipse {
  wtp {
    component {
      contextPath = 'uaa'
    }
  }
}

repositories {
  maven { url 'https://repo.spring.io/libs-milestone' }
  mavenLocal()
  mavenCentral()
}

description = 'UAA'
dependencies {
  compile(project(':cloudfoundry-identity-server')){
    exclude(module: 'jna')
  }

  compile group: 'cglib', name: 'cglib', version:parent.cglibVersion
  compile(group: 'com.ge.predix', name: 'spring-metering-filter', version:'1.2.3') {
    exclude(group: 'javax.mail')
    exclude(module: 'jackson-core')
    exclude(module: 'jackson-annotations')
    exclude(module: 'jackson-databind')
  }
  // For dynamic log level configuration
  compile(group: 'com.ge.predix', name: 'security-dynamic-log-configurer', version: '1.1.1') {
    exclude(module: 'jackson-core')
    exclude(module: 'jackson-annotations')
    exclude(module: 'jackson-databind')
  }

  runtime group: 'org.springframework.security', name: 'spring-security-config', version:parent.springSecurityVersion
  runtime group: 'org.springframework.retry', name: 'spring-retry', version:parent.springRetryVersion
  runtime group: 'org.aspectj', name: 'aspectjweaver', version:parent.aspectJVersion
  runtime group: 'org.postgresql', name: 'postgresql', version:parent.postgresqlVersion

  providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: parent.servletVersion

  runtime group: 'org.apache.httpcomponents', name: 'httpasyncclient', version:'4.1'
  runtime group: 'org.springframework.data', name: 'spring-data-commons', version:'1.9.1.RELEASE'
  runtime group: 'com.nurego', name: 'nurego-java', version:'1.0.18'


  testCompile identityServer.configurations.testCompile.dependencies
  testCompile identityServer.sourceSets.test.output

  testCompile(group: 'org.apache.directory.server', name: 'apacheds-core', version:'1.5.5') {
    exclude(module: 'bcprov-jdk15')
    exclude(module: 'slf4j-api')
    exclude(module: 'slf4j-log4j12')
  }
  testCompile(group: 'org.apache.directory.server', name: 'apacheds-protocol-ldap', version:'1.5.5') {
    exclude(module: 'bcprov-jdk15')
    exclude(module: 'slf4j-api')
    exclude(module: 'slf4j-log4j12')
  }
  testCompile group: 'junit', name: 'junit', version: parent.junitVersion
  testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version:'2.42.2'
  testCompile(group: 'com.github.detro.ghostdriver', name: 'phantomjsdriver', version:'1.1.0') {
    exclude(module: 'servlet-api-2.5')
  }
  testCompile group: 'dumbster', name: 'dumbster', version:'1.6'
  testCompile group: 'com.google.zxing', name: 'core', version: parent.zxingVersion
  testCompile group: 'org.reflections', name: 'reflections', version: '0.9.10'
  testCompile group: 'org.skyscreamer', name:'jsonassert', version: '0.9.0'
  testCompile group: 'org.springframework', name: 'spring-test', version: parent.springVersion
  testCompile group: 'org.springframework.security', name: 'spring-security-test', version: parent.springSecurityVersion
  testCompile group: 'org.mockito', name: 'mockito-core', version: parent.mockitoVersion
  testCompile group: 'org.apache.tomcat', name: 'tomcat-jdbc', version:parent.tomcatJdbcPoolVersion
  testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: parent.hamcrestVersion
  testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:1.2.0.RC1'
  testCompile group: 'com.nurego', name: 'nurego-java', version:'1.0.18'
}
ext {
  snippetsDir = file('build/generated-snippets')
}
test {
  exclude 'org/cloudfoundry/identity/uaa/integration/*.class'
  exclude '**/*IT.class'
  exclude '**/*AT.class'
  exclude 'org/cloudfoundry/identity/uaa/degraded/*.class'
  systemProperty 'java.io.tmpdir', '/tmp'
  systemProperty "mock.suite.test", "true"
}

task populateVersionfile {
  def versionfile = new File("$projectDir/slateCustomizations/source/versionfile")
  versionfile.createNewFile()
  assert versionfile.exists()
  versionfile.text = version
}
task customizeSlate(type: Copy) {
  dependsOn populateVersionfile
  from 'slate'
  from 'slateCustomizations'
  into 'build/slate'
}
task docsTestRestDocs(type: Test) {
  include '**/DefaultDocsTestSuite.class'
}
task(bundleInstall, type: Exec) {
  dependsOn 'customizeSlate'
  workingDir file('build/slate')
  executable 'bundle'
  args 'install'
}

task(deleteDefaultContent, type: Delete) {
    delete 'build/slate/source/index.html.md'
}


task(slate, type: Exec) {
  dependsOn 'customizeSlate', 'deleteDefaultContent', 'bundleInstall', 'docsTestRestDocs'
      workingDir file('build/slate')
      executable 'bundle'
      args 'exec', 'middleman', 'build', '--verbose', '--build-dir=../docs/version/' + version
}
generateDocs {
  dependsOn slate
}

integrationTest {
  filter {
    exclude '**/*AT.class'
    exclude 'org/cloudfoundry/identity/uaa/degraded/*.class'
    includeTestsMatching "org.cloudfoundry.identity.uaa.integration.*"
    includeTestsMatching "*IT"
  }
}

task acceptanceTest(type: Test) {
  include "org/cloudfoundry/identity/uaa/acceptance/*.class"
}

task degradedTestCloud(type: Test) {
  systemProperty "RUN_AGAINST_CLOUD", true
  include "org/cloudfoundry/identity/uaa/degraded/*.class"
}

task degradedTestLocal(type: Test) {
  systemProperty "RUN_AGAINST_CLOUD", false
  dependsOn rootProject.cargoStartLocal
  finalizedBy rootProject.cargoStopLocal
  include "org/cloudfoundry/identity/uaa/degraded/*.class"
}

war {
  //workaround for maven <scope>optional</scope>
  rootSpec.exclude("**/spring-security-oauth-*.jar")
}

task npmInstall(type: Exec) {
  executable 'npm'
  args 'install'
}

task jasmineTest(type: Exec) {
  dependsOn npmInstall
  executable 'npm'
  args 'test'
}