<?xml version="1.0" encoding="UTF-8" ?>
<beans
          xmlns="http://www.springframework.org/schema/beans"
          xmlns:security="http://www.springframework.org/schema/security"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
          xmlns:util="http://www.springframework.org/schema/util"
          xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd
    http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
    http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd
    http://www.springframework.org/schema/security/oauth2 https://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd">

    <authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security"/>

    <oauth:resource id="uaa" access-token-uri="${uaa.token.url:http://localhost:8080/uaa/oauth/token}"
                    client-id="login" client-secret="${LOGIN_SECRET:loginsecret}" type="client_credentials"/>

    <!-- Pattern: /oauth/authorize parameters:{response_type=code,code=?} -->
    <http name="secFilterAutologinAuthorize" request-matcher-ref="autologinAuthorizeRequestMatcher"
                    entry-point-ref="loginEntryPoint"
                    xmlns="http://www.springframework.org/schema/security">
        <anonymous enabled="false"/>
        <custom-filter ref="autologinAuthenticationFilter" position="FORM_LOGIN_FILTER"/>
        <csrf disabled="false" token-repository-ref="loginCookieCsrfRepository"/>
    </http>

    <http name="secFilterCodeLogin" request-matcher-ref="autologinRequestMatcher" entry-point-ref="loginEntryPoint"
                    xmlns="http://www.springframework.org/schema/security" use-expressions="false">
        <intercept-url pattern="/**" method="GET"/>
        <custom-filter ref="autologinAuthenticationFilter" position="FORM_LOGIN_FILTER"/>
        <anonymous enabled="false"/>
        <csrf disabled="true"/>
    </http>

    <!-- Pattern:/autologin -->
    <http name="secFilterAutologin" pattern="/autologin" create-session="stateless"
                    entry-point-ref="basicAuthenticationEntryPoint"
                    xmlns="http://www.springframework.org/schema/security" authentication-manager-ref="emptyAuthenticationManager"
                    use-expressions="false">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" method="POST"/>
        <anonymous enabled="false"/>
        <custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER"/>
        <csrf disabled="true"/>
    </http>

    <bean id="acceptInvitationSecurityContextPersistenceFilter"
                    class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
        <constructor-arg name="repo">
            <bean id="invitationsContextRepo"
                                        class="org.springframework.security.web.context.HttpSessionSecurityContextRepository">
                <property name="trustResolver">
                    <bean id="invitationsTrustResolver"
                                                            class="org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolver"/>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <http name="invitationsSecurity"
                    entry-point-ref="loginEntryPoint"
                    use-expressions="true"
                    pattern="/invitations/**"
                    xmlns="http://www.springframework.org/schema/security">
        <access-denied-handler ref="loginEntryPoint"/>
        <intercept-url pattern="/invitations/accept" access="isFullyAuthenticated() or isAnonymous()" method="GET"/>
        <intercept-url pattern="/invitations/accept.do" access="hasAuthority('uaa.invited')" method="POST"/>
        <intercept-url pattern="/invitations/accept_enterprise.do" access="hasAuthority('uaa.invited')" method="POST"/>
        <intercept-url pattern="/**" access="denyAll"/>
        <csrf disabled="false"
                              token-repository-ref="loginCookieCsrfRepository"/>
        <custom-filter ref="acceptInvitationSecurityContextPersistenceFilter" before="FIRST"/>
    </http>

    <http name="invitationsEndpointSecurity"
                    entry-point-ref="oauthAuthenticationEntryPoint"
                    use-expressions="true"
                    pattern="/invite_users/**"
                    create-session="stateless"
                    xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**"
                              access="#oauth2.hasAnyScope('scim.invite') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                              method="POST"/>
        <intercept-url pattern="**" access="denyAll"/>
        <expression-handler ref="oauthWebExpressionHandler"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
        <custom-filter ref="resourceAgnosticAuthenticationFilter" position="PRE_AUTH_FILTER"/>
        <csrf disabled="true"/>
    </http>

    <bean id="resetPasswordEntryPoint"
                    class="org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationEntryPoint"/>
    <bean id="resetPasswordAuthenticationFilter"
                    class="org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationFilter">
        <constructor-arg name="entryPoint" ref="resetPasswordEntryPoint"/>
        <constructor-arg name="handler" ref="accountSavingAuthenticationSuccessHandler"/>
        <constructor-arg name="service" ref="resetPasswordService"/>
        <constructor-arg name="expiringCodeStore" ref="codeStore"/>
    </bean>
    <http name="resetPasswordSubmit"
                    pattern="/reset_password.do"
                    disable-url-rewriting="true"
                    entry-point-ref="loginEntryPoint"
                    use-expressions="false"
                    xmlns="http://www.springframework.org/schema/security">
        <custom-filter ref="userManagementSecurityFilter" before="ANONYMOUS_FILTER"/>
        <custom-filter ref="resetPasswordAuthenticationFilter" position="LAST"/>
        <csrf disabled="false"
                              token-repository-ref="loginCookieCsrfRepository"/>
        <access-denied-handler ref="loginEntryPoint"/>
    </http>

    <http name="forgotPasswordSecurity"
                    pattern="/forgot_password**"
                    disable-url-rewriting="true"
                    entry-point-ref="loginEntryPoint"
                    use-expressions="false"
                    xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <csrf disabled="true"/>
        <access-denied-handler ref="loginEntryPoint"/>
    </http>

    <bean id="uiAuthorizeRequestMatcher" class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
        <constructor-arg value="/oauth/authorize**"/>
    </bean>

    <bean id="loginCookieCsrfRepository"
                    class="org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository">
        <property name="secure" value="${require_https:false}"/>
    </bean>

    <bean id="accountSavingAuthenticationSuccessHandler"
                    class="org.cloudfoundry.identity.uaa.login.AccountSavingAuthenticationSuccessHandler">
        <constructor-arg name="redirectingHandler" ref="successRedirectHandler"/>
        <constructor-arg name="currentUserCookieFactory" ref="currentUserCookieFactory"/>
    </bean>

    <bean id="currentUserCookieFactory" class="org.cloudfoundry.identity.uaa.login.CurrentUserCookieFactory">
        <constructor-arg name="sessionTimeout" value="${servlet.session-cookie.max-age:1800}"/>
        <constructor-arg name="secure" value="${require_https:false}"/>
    </bean>

    <bean name="clientRedirectStateCache" class="org.cloudfoundry.identity.uaa.web.UaaSavedRequestCache">
        <property name="requestMatcher" ref="uiAuthorizeRequestMatcher"/>
    </bean>

    <http name="deleteSavedAccountSecurity" pattern="/delete_saved_account**" create-session="stateless"
                    entry-point-ref="basicAuthenticationEntryPoint"
                    authentication-manager-ref="clientAuthenticationManager" use-expressions="false"
                    xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
    </http>

    <http name="verifyEmailSecurity" pattern="/verify_email" disable-url-rewriting="true"
                    xmlns="http://www.springframework.org/schema/security"
                    entry-point-ref="loginEntryPoint" use-expressions="false">
        <intercept-url pattern="/verify_email" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <anonymous enabled="true"/>
        <csrf disabled="true"/>
    </http>

    <bean id="errorMessageAuthenticationFailureHandler"
                    class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
        <property name="exceptionMappings">
            <map>
                <entry key="org.cloudfoundry.identity.uaa.authentication.AccountNotVerifiedException"
                                                  value="/login?error=account_not_verified"/>
                <entry key="org.cloudfoundry.identity.uaa.authentication.PasswordExpiredException"
                                                  value="/login?error=password_expired"/>
                <entry key="org.cloudfoundry.identity.uaa.authentication.AuthenticationPolicyRejectionException"
                                                  value="/login?error=account_locked"/>
                <entry key="org.cloudfoundry.identity.uaa.authentication.AccountNotPreCreatedException"
                                                  value="/login?error=account_not_precreated"/>
                <entry key="org.cloudfoundry.identity.uaa.authentication.PasswordChangeRequiredException"
                                                  value="/force_password_change"/>
            </map>
        </property>
        <property name="defaultFailureUrl" value="/login?error=login_failure"/>
    </bean>

    <bean id="uaaAuthenticationFailureHandler"
                    class="org.cloudfoundry.identity.uaa.login.UaaAuthenticationFailureHandler">
        <constructor-arg name="delegate" ref="errorMessageAuthenticationFailureHandler"/>
        <constructor-arg name="currentUserCookieFactory" ref="currentUserCookieFactory"/>
    </bean>

    <bean id="loginEntryPoint" class="org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandler">
        <constructor-arg name="redirectCsrf" value="/invalid_request"/>
        <constructor-arg name="redirectNotLoggedIn" value="/login?error=invalid_login_request"/>
    </bean>

    <bean id="externalOAuthLogoutHandler"
                    class="org.cloudfoundry.identity.uaa.provider.oauth.ExternalOAuthLogoutSuccessHandler">
        <constructor-arg name="providerProvisioning" ref="externalOAuthProviderConfigurator"/>
        <constructor-arg name="oidcMetadataFetcher" ref="oidcMetadataFetcher"/>
        <constructor-arg name="identityZoneManager" ref="identityZoneManager"/>
    </bean>

    <bean id="logoutHandler"
                    class="org.cloudfoundry.identity.uaa.authentication.ZoneAwareWhitelistLogoutSuccessHandler">
        <constructor-arg name="clientDetailsService" ref="jdbcClientDetailsService"/>
        <constructor-arg name="externalOAuthLogoutHandler" ref="externalOAuthLogoutHandler"/>
        <constructor-arg name="keyInfoService" ref="keyInfoService"/>
    </bean>

    <bean id="autologinAuthenticationFilter"
                    class="org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilter">
        <constructor-arg ref="autologinAuthenticationManager"/>
        <property name="parameterNames">
            <list>
                <value>code</value>
                <value>response_type</value>
            </list>
        </property>
        <property name="methods">
            <set>
                <value>GET</value>
                <value>POST</value>
            </set>
        </property>
        <property name="successHandler" ref="accountSavingAuthenticationSuccessHandler"/>
    </bean>

    <!-- Pattern: /oauth/authorize parameters:{response_type=code,code=?} -->
    <bean id="autologinAuthorizeRequestMatcher" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/oauth/authorize"/>
        <property name="parameters">
            <map>
                <entry key="response_type" value="code"/>
                <entry key="code" value=""/>
            </map>
        </property>
    </bean>

    <bean id="autologinRequestMatcher" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/autologin"/>
        <property name="parameters">
            <map>
                <entry key="code" value=""/>
            </map>
        </property>
    </bean>

</beans>
