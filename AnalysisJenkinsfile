#!/usr/bin/env groovy

pipeline {
    agent none
    triggers {
        cron('H 22 1 * *')
    }
    options {
        timestamps()
        skipDefaultCheckout()
        buildDiscarder(logRotator(artifactNumToKeepStr: '30', numToKeepStr: '30'))
    }
    parameters {
        booleanParam(name: 'WHITESOURCE_SCAN', defaultValue: true, description: 'Run Whitesource scan')
        booleanParam(name: 'COVERITY_SCAN', defaultValue: true, description: 'Run Coverity scan')
    }
    stages {
        stage('Run code analysis') {
            parallel {
                stage('Whitesource') {
                    when {
                        beforeAgent true
                        expression { params.WHITESOURCE_SCAN }
                    }
                    agent {
                        docker {
                            image 'openjdk:11'
                            label 'dind'
                            args '-v /var/lib/docker/.gradle:/root/.gradle'
                        }
                    }
                    stages {
                        stage('Download sources') {
                            steps {
                                checkout scm
                                dir('uaa-cf-release') {
                                    git changelog: false,
                                        credentialsId: 'github.build.ge.com',
                                        poll: false,
                                        url: 'https://github.build.ge.com/predix/uaa-cf-release.git',
                                        branch: 'master'
                                }
                            }
                        }
                        stage('Collect dependencies') {
                            steps {
                                sh '''#!/bin/bash -ex

                                    source uaa-cf-release/config-local/set-env.sh
                                    unset HTTPS_PROXY
                                    unset HTTP_PROXY
                                    unset http_proxy
                                    unset https_proxy
                                    unset GRADLE_OPTS

                                    ./gradlew collectDependencies
                                '''
                            }
                        }
                        stage('Run scan') {
                            environment {
                                PROPEL_API_KEY = credentials('PROPEL_API_KEY')
                                PRODUCT_NAME = 'GESoftware-CF'
                                PROJECT_NAME = 'uaa'
                                WORKSPACE_ID = 'bjmjek1k'
                                LOCAL = true
                            }
                            steps {
                                sh '''#!/bin/bash

                                    source uaa-cf-release/config-local/set-env.sh
                                    unset HTTPS_PROXY
                                    unset HTTP_PROXY
                                    unset http_proxy
                                    unset https_proxy
                                    unset GRADLE_OPTS

                                    echo 'Downloading Propel OSS binary'
                                    wget --http-user=${ARTIFACTORY_READER} \
                                         --http-password=${ARTIFACTORY_READER_PW} \
                                         https://artifactory.build.ge.com/BUILDGE/propel-oss/latest/linux/propel-oss
                                    chmod u+x propel-oss
    
                                    echo 'Running scan'
                                    ./propel-oss
                                '''
                            }
                        }
                    }
                    post {
                        always {
                            deleteDir()
                        }
                    }
                }
                stage('Coverity') {
                    when {
                        beforeAgent true
                        expression { params.COVERITY_SCAN }
                    }
                    agent {
                        docker {
                            image 'registry.gear.ge.com/dig-propel/propel-coverity-image'
                            label 'dind'
                            args '-v /var/lib/docker/.gradle:/root/.gradle'
                        }
                    }
                    stages {
                        stage('Download sources') {
                            steps {
                                checkout scm
                                dir('uaa-cf-release') {
                                    git changelog: false,
                                        credentialsId: 'github.build.ge.com',
                                        poll: false,
                                        url: 'https://github.build.ge.com/predix/uaa-cf-release.git',
                                        branch: 'master'
                                }
                            }
                        }
                        stage('Install tools') {
                            steps {
                                sh '''
                                    # Install Java 11 and JQ
                                    apt update && apt install -y --no-install-recommends openjdk-11-jdk jq
                                '''
                            }
                        }
                        stage('Run scan') {
                            environment {
                                COVERITY = credentials('Coverity_Token')
                                COVERITY_HOST = 'pdx.coverity.build.ge.com'
                                COVERITY_PORT = '8443'
                                COVERITY_STREAM = 'Predix UAA'
                                COVERITY_PROJECT = 'Predix%20UAA'
                                COVERITY_VIEW = 'Jenkins_Predix_UAA'
                            }
                            steps {
                                sh label: 'Run Gradle build with Coverity agent', script: '''#!/usr/bin/env bash
                                    rm -rf ${WORKSPACE}/covscan
                                    mkdir -p ${WORKSPACE}/covscan

                                    source uaa-cf-release/config-local/set-env.sh
                                    unset HTTPS_PROXY
                                    unset HTTP_PROXY
                                    unset http_proxy
                                    unset https_proxy
                                    unset GRADLE_OPTS

                                    export JAVA_HOME='/usr/lib/jvm/java-11-openjdk-amd64'
                                    export PATH="$JAVA_HOME/bin:$PATH"

                                    cov-build --dir ${WORKSPACE}/covscan \
                                              ./gradlew \
                                              --no-daemon -Porg.gradle.daemon=false -Dorg.gradle.daemon=false \
                                              clean build -x test
                                '''

                                sh label: 'Run Coverity analysis', script: '''#!/usr/bin/env bash
                                    # This line is added to reduce the coverity scan time by not committing the
                                    # summary of the scan. Not publishing the summary would not remove any
                                    # important information published to coverity server.
                                    cov-analyze --dir ${WORKSPACE}/covscan --export-summaries false
                                '''

                                sh label: 'Publish Coverity defects', script: '''#!/usr/bin/env bash
                                    cov-commit-defects --dir ${WORKSPACE}/covscan \
                                                       --host ${COVERITY_HOST} --https-port ${COVERITY_PORT} \
                                                       --stream "${COVERITY_STREAM}" \
                                                       --user ${COVERITY_USR} --password ${COVERITY_PSW}
                                '''

                                script {
                                    int issueCount = sh(label: 'Count Coverity issues', returnStdout: true, script: '''#!/usr/bin/env bash
                                        curl -s --user "${COVERITY_USR}:${COVERITY_PSW}" \
                                             "https://${COVERITY_HOST}:${COVERITY_PORT}/api/viewContents/issues/v1/${COVERITY_VIEW}?projectId=${COVERITY_PROJECT}&rowCount=1" \
                                        | jq '.viewContentsV1.totalRows'
                                    ''').trim().toInteger()

                                    if (issueCount > 0) {
                                        unstable "### Coverity scan found ${issueCount} high/medium severity issues ###"
                                    }
                                }
                            }
                        }
                    }
                    post {
                        always {
                            deleteDir()
                        }
                    }
                }
            }
        }
    }
}
